#include "stdafx.h"

//global variables
cv::Mat frame; //current frame
cv::Mat fgMaskMOG; //fg mask generated by MOG method
cv::Mat fgMaskMOG2; //fg mask fg mask generated by MOG2 method
cv::Ptr<cv::BackgroundSubtractor> pMOG; //MOG Background subtractor
cv::Ptr<cv::BackgroundSubtractor> pMOG2; //MOG2 Background subtractor
int keyboard;
MOGDetection::MOGDetection() {

}
MOGDetection::~MOGDetection() {

}
void MOGDetection::detect(cv::Mat frame) {
	cv::VideoCapture capture;
	//capture = CaptureVideo::getInstance();
	//if (!capture.open(0))
		//return;// false;
	cv::namedWindow("Frame");
	cv::namedWindow("FG Mask MOG");
	cv::namedWindow("FG Mask MOG 2");

	//create Background Subtractor objects
	pMOG = cv::bgsegm::createBackgroundSubtractorMOG(); //MOG approach
	pMOG2 = cv::createBackgroundSubtractorMOG2(); //MOG2 approach
	while ((char)keyboard != 'q' && (char)keyboard != 27) {
		//read the current frame
		if (!capture.read(frame)) {
			std::cerr << "Unable to read next frame." << std::endl;
			std::cerr << "Exiting..." << std::endl;
			exit(EXIT_FAILURE);
		}
		//update the background model
		pMOG->apply(frame, fgMaskMOG);
		pMOG2->apply(frame, fgMaskMOG2);
		//get the frame number and write it on the current frame
		std::stringstream ss;
		rectangle(frame, cv::Point(10, 2), cv::Point(100, 20),
			cv::Scalar(255, 255, 255), -1);
		ss << capture.get(cv::CAP_PROP_POS_FRAMES);
		std::string frameNumberString = ss.str();
		putText(frame, frameNumberString.c_str(), cv::Point(15, 15),
			cv::FONT_HERSHEY_SIMPLEX, 0.5, cv::Scalar(0, 0, 0));
		//show the current frame and the fg masks
		imshow("Frame", frame);
		imshow("FG Mask MOG", fgMaskMOG);
		imshow("FG Mask MOG 2", fgMaskMOG2);
		//get the input from the keyboard
		keyboard = cv::waitKey(30);
	}
	//delete capture object
	capture.release();
	return;// false;
}